{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "pink",
    "glyph" : "magic"
  },
  "name" : "Coronazahlen alte werte",
  "script" : "let param = args.widgetParameter\n\nclass CoronaWidget {\n\n  constructor() {\n    \/\/this.apiUrl = (dateformat) => \"https:\/\/services2.arcgis.com\/mL26ZKdlhFJH9AoM\/arcgis\/rest\/services\/es_corona\/FeatureServer\/0\/query?f=json&where=dat_text%3D${dateformat}&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=NAMGEM%20asc&resultOffset=0&resultRecordCount=50&resultType=standard&cacheHint=true\"\n    \/\/this.apiUrl1 =\"https:\/\/services2.arcgis.com\/mL26ZKdlhFJH9AoM\/arcgis\/rest\/services\/es_corona\/FeatureServer\/0\/query?f=json&where=dat_text%3D20210126&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=NAMGEM%20asc&outSR=102100&resultOffset=0&resultRecordCount=50&resultType=standard&cacheHint=true\" \n    \/\/this.apiUrl2 =\"https:\/\/services2.arcgis.com\/mL26ZKdlhFJH9AoM\/arcgis\/rest\/services\/es_corona\/FeatureServer\/0\/query?f=json&where=dat_text%3D20210127&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=NAMGEM%20asc&outSR=102100&resultOffset=0&resultRecordCount=50&resultType=standard&cacheHint=true\" \n\n\n    \/\/ https:\/\/services7.arcgis.com\/mOBPykOjAyBO2ZKk\/arcgis\/rest\/services\/RKI_Landkreisdaten\/FeatureServer\/0\/query?where=1%3D1&outFields=GEN,last_update,cases,cases7_per_100k&inSR=4326&spatialRel=esriSpatialRelWithin&returnGeometry=false&outSR=4326&f=json\n\n\n    \/\/https:\/\/services2.arcgis.com\/mL26ZKdlhFJH9AoM\/arcgis\/rest\/services\/inzidenz_pro_woche\/FeatureServer\/0\/query?where=1%3D1&outFields=datum,FID,inzidenz&inSR=4326&spatialRel=esriSpatialRelWithin&returnGeometry=false&outSR=4326&f=json\"\n\n    \/\/this.urlInsidenz = \"https:\/\/services2.arcgis.com\/mL26ZKdlhFJH9AoM\/ArcGIS\/rest\/services\/kreise_inzidenz_utm\/FeatureServer\/0\/query?where=1%3D1&outFields=LANGNAME,Beschriftu,FID,inzidenz&inSR=4326&spatialRel=esriSpatialRelWithin&returnGeometry=false&outSR=4326&f=json\"\n\n    this.cities = {\n      'Aichtal': 0,\n      'Aichwald': 1,\n      'Altbach': 2,\n      'Altdorf': 3,\n      'Altenriet': 4,\n      'Baltmannsweiler': 5,\n      'Bempflingen': 6,\n      'Beuren': 7,\n      'Bissingen an der Teck': 8,\n      'Deizisau': 9,\n      'Denkendorf': 10,\n      'Dettingen unter Teck': 11,\n      'Erkenbrechtsweiler': 12,\n      'Esslingen am Neckar': 13,\n      'Filderstadt': 14,\n      'Frickenhausen': 15,\n      'Großbettlingen': 16,\n      'Hochdorf': 17,\n      'Holzmaden': 18,\n      'Kirchheim unter Teck': 19,\n      'Kohlberg': 20,\n      'Köngen': 21,\n      'Leinfelden-Echterdingen': 22,\n      'Lenningen': 23,\n      'Lichtenwald': 24,\n      'Neckartailfingen': 25,\n      'Neckartenzlingen': 26,\n      'Neidlingen': 27,\n      'Neuffen': 28,\n      'Neuhausen auf den Fildern': 29,\n      'Notzingen': 30,\n      'Nürtingen': 31,\n      'Oberboihingen': 32,\n      'Ohmden': 33,\n      'Ostfildern': 34,\n      'Owen': 35,\n      'Plochingen': 36,\n      'Reichenbach an der Fils': 37,\n      'Schlaitdorf': 38,\n      'Unterensingen': 39,\n      'Weilheim an der Teck': 40,\n      'Wendlingen am Neckar': 41,\n      'Wernau': 42,\n      'Wolfschlugen': 43,\n    };\n  }\n\n  async run() {\n    let widget = await this.createWidget()\n    if (!config.runsInWidget) {\n      await widget.presentSmall()\n    }\n    Script.setWidget(widget)\n    Script.complete()\n  }\n\n  async createWidget() {\n\n    var d = new Date();\n    \n    d.setDate(d.getDate() - 1);\n    var hours = d.getHours().toString();\n    if (hours.toString().length == 1) {\n      hours = '0' + hours;\n    }\n    var minute = d.getMinutes().toString();\n    if (minute.toString().length == 1) {\n      minute = '0' + minute;\n    }\n    var lastupDated = hours + \":\" + minute\n    var day = (d.getDate() - 1);\n    var month = (d.getMonth() + 1).toString();\n    if (month.toString().length == 1) {\n      month = '0' + month;\n    }\n    var year = d.getFullYear().toString();\n    var dateformat = year + month + day.toString();\n    let data2 = await this.getData1(dateformat)\n\n    let list = new ListWidget()\n    list.backgroundColor = Color.dynamic(Color.white(), Color.black())\n    list.setPadding(0, 0, 0, 0)\n    let textStack = list.addStack()\n    textStack.setPadding(4, 4, 4, 4)\n    textStack.layoutVertically()\n    textStack.topAlignContent()\n\n    if (data2.error) {\/\/gestern\n      day = (d.getDate() - 2);\n      dateformat = year + month + (day).toString();\n      data2 = await this.getData1(dateformat)\n      if (data2.error) {\/\/vorgestern\n        day -= 1\n        dateformat = year + month + day.toString();\n        data2 = await this.getData1(dateformat)\n        if (data2.error) {\/\/vorvorgestern\n          day = (d.getDate() - 3);\n          dateformat = year + month + day.toString();\n          data2 = await this.getData1(dateformat)\n          if (data2.error) {\n            let errorText = textStack.addText(data2.error.toUpperCase())\n            textStack.setPadding(14, 14, 14, 14)\n            errorText.font = Font.mediumSystemFont(13)\n          } else {\n            await this.setText(textStack, data2, list);\n          }\n        } else {\n          await this.setText(textStack, data2, list);\n        }\n      } else {\n        await this.setText(textStack, data2, list);\n      }\n    } else {\n      await this.setText(textStack, data2, list)\n    }\n\n\n\n\n    return list\n  }\n\n\n\n\n\n\n  async getData1(dateformat) {\n    try {\n\/\/ console.log(dateformat)\n\n var d = new Date();\n    var hours = d.getHours().toString();\n    if (hours.toString().length == 1) {\n      hours = '0' + hours;\n    }\n    var minute = d.getMinutes().toString();\n    if (minute.toString().length == 1) {\n      minute = '0' + minute;\n    }\n    var lastupDated = hours + \":\" + minute\n\n      let apiUrl = \"https:\/\/services2.arcgis.com\/mL26ZKdlhFJH9AoM\/arcgis\/rest\/services\/es_corona\/FeatureServer\/0\/query?f=json&where=dat_text%3D\" + dateformat + \"&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=NAMGEM%20asc&resultOffset=0&resultRecordCount=50&resultType=standard&cacheHint=true\"\n\n      const r = new Request(apiUrl)\n      let resp = await r.loadJSON()\n      let features = resp.features\n\n      var fidCity = \"\"\n      var attr = features[0].attributes\n      let city = \"Plochingen\"\n\/\/       console.log(param)\n      if (param === null){}\n      else{city = param.toString()}\n\nif (city in this.cities) {\n        let number1 = this.cities[city]\n        attr = features[number1].attributes\n      } else {\n        return { error: \"Stadt nicht gefunden. Bitte Name bei Parametern ändern\" };\n      }\n\n      let cityName = attr.NAMGEM\n      let infectedPersons = attr.pers_qua.toString()\n      let deaths = attr.tod_ins.toString()\n      let residentsPercent = attr.per_qua_p.toString()\n      let residents = attr.einw.toString()\n      let infTotal = attr.inf_ges.toString()\n      let inzidenz = attr.inzidenz.toString().substr(0, 4)\n      let gen = attr.gen_p.toString()\n      let proz_gem = attr.proz_gem.toString()\n      let tod_neu = attr.tod_neu.toString()\n      let inf_neu = attr.inf_neu.toString()\n      let datum = attr.dat_zahl.toString()\n      let fid = attr.FID.toString()\n      fidCity = fid\n      \n      let year = dateformat.substring(0, 4)\n      let month = dateformat.substring(4, 6)\n      let day = dateformat.substring(6, 8)\n      let theDate= day+\".\"+month+\".\"+year\n      return {\n        cityName: cityName,\n        infectedPersons: infectedPersons,\n        residentsPercent: residentsPercent,\n        infTotal: infTotal,\n        inzidenz: inzidenz,\n        gen: gen,\n        residents: residents,\n        proz_gem: proz_gem,\n        tod_neu: tod_neu,\n        inf_neu: inf_neu,\n        datum: datum,\n        lastupDated: lastupDated,\n        dateformat: theDate,\n        fid: fid,\n        deaths: deaths\n      }\n    } catch (e) {\n      return { error: \"Error getting data\" };\n    }\n  }\n\n  async setText(textStack, data, list) {\n\/\/     console.log(data)\n    list.refreshAfterDate = new Date(Date.now() + 60 * 60 * 1000)\n\n    let headerText = textStack.addText(\"Coronastatistik von\\n\" + data.cityName)\n    headerText.textColor = Color.green()\n    headerText.font = Font.mediumSystemFont(12)\n\n    let text1 = textStack.addText(\"Infizierte: \" + data.infectedPersons)\n    text1.textColor = Color.dynamic(Color.black(), Color.white())\n    text1.font = Font.mediumSystemFont(10)\n    let text2 = textStack.addText(\"Neuinfizierte: \" + data.inf_neu)\n    text2.textColor = Color.dynamic(Color.black(), Color.white())\n    text2.font = Font.mediumSystemFont(10)\n    if (data.inf_neu ===\"0\"){\n   }else{\n    text2.textColor= Color.red()\n  }\n\n    let text3 = textStack.addText(\"Bevölkerung Prozent: \" + data.residentsPercent)\n    text3.textColor = Color.dynamic(Color.black(), Color.white())\n    text3.font = Font.mediumSystemFont(10)\n\n    let text4 = textStack.addText(\"Infizierte gesamt: \" + data.infTotal)\n    text4.textColor = Color.dynamic(Color.black(), Color.white())\n    text4.font = Font.mediumSystemFont(10)\n\n    let text5 = textStack.addText(\"Tote: \" + data.deaths)\n    text5.textColor = Color.dynamic(Color.black(), Color.white())\n    text5.font = Font.mediumSystemFont(10)\n\n    let text6 = textStack.addText(\"Neue Tote: \" + data.tod_neu)\n    text6.textColor = Color.dynamic(Color.black(), Color.white())\n    text6.font = Font.mediumSystemFont(10)\n    if (data.tod_neu ===\"0\"){\n   }else{\n    text6.textColor= Color.red()\n  }\n\n    let test7 = textStack.addText(\"Einwohner: \" + data.residents)\/\/+\"\\nDatum: \"+ data.datum)\n    test7.textColor = Color.white()\n    test7.font = Font.mediumSystemFont(8)\n\n    let test8 = textStack.addText(\"Stand: \"+ data.dateformat+\"\\nAktualisiert: Heute \" + data.lastupDated)\n    test8.textColor = Color.green()\n    test8.font = Font.mediumSystemFont(6)\n  }\n\n\n\n}\/\/eoc\n\nawait new CoronaWidget().run();",
  "share_sheet_inputs" : [

  ]
}